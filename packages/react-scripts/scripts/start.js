// @remove-on-eject-begin
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
// @remove-on-eject-end
'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  console.log('create-react-app error', err);
});

// Ensure environment variables are read.
require('../config/env');
// @remove-on-eject-begin
// Do the preflight check (only happens before eject).
const verifyPackageTree = require('./utils/verifyPackageTree');
if (process.env.SKIP_PREFLIGHT_CHECK !== 'true') {
  verifyPackageTree();
}
// @remove-on-eject-end

const path = require('path');
const http = require('http');
const chalk = require('chalk');
const webpack = require('webpack');
const spawn = require('child_process').spawn;
const detect = require('detect-port-alt');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('@ueno/react-dev-utils/clearConsole');
const checkRequiredFiles = require('@ueno/react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require('@ueno/react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('@ueno/react-dev-utils/openBrowser');
const paths = require('../config/paths');
const config = require('../config/webpack.config.client.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appIndexJs])) {
  process.exit(1);
}

const devWebpackConfigPath = path.join(
  paths.ownPath.replace(process.cwd(), '.'),
  'config/webpack.config.server.dev.js'
);

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(
    `Learn more here: ${chalk.yellow('http://bit.ly/CRA-advanced-config')}`
  );
  console.log();
}

const onResponsive = (hostname, port, cb) =>
  setTimeout(() => {
    http
      .get({ hostname, port, path: '/', agent: false }, cb)
      .on('error', () => onResponsive(hostname, port, cb));
  }, 1000);

// We require that you explictly set browsers and do not fall back to
// browserslist defaults.
const { checkBrowsers } = require('@ueno/react-dev-utils/browsersHelper');
checkBrowsers(paths.appPath)
  .then(() => {
    // We attempt to use the default port but if it is busy, we offer the user to
    // run on a different port. `choosePort()` Promise resolves to the next free port.
    return choosePort(HOST, DEFAULT_PORT);
  })
  .then(port =>
    detect(port + 1).then(webpackDevServerPort => {
      return [webpackDevServerPort, port];
    })
  )
  .then(([port, portServer]) => {
    if (port == null || portServer == null) {
      // We have not found a port.
      return;
    }
    // Start server
    const serverEnv = Object.create(process.env);
    serverEnv.PORT = portServer;
    serverEnv.REMOTE_PORT = port;
    const server = spawn(
      './node_modules/.bin/node-hot',
      ['--config', devWebpackConfigPath],
      { stdio: 'inherit', env: serverEnv }
    );
    // Set local port
    process.env.LOCAL_PORT = portServer;
    config.output.publicPath = `http://${HOST}:${port}/`;

    // Begin webpack devserver sequence
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    const urls = prepareUrls(protocol, HOST, portServer);
    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler(
      webpack,
      config,
      appName,
      urls,
      paths.useYarn
    );
    // Load proxy config
    const proxySetting = require(paths.appPackageJson).proxy;
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    devServer.listen(port, HOST, err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
    });

    onResponsive(HOST, portServer, () => {
      openBrowser(urls.localUrlForBrowser);
    });

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        server.kill();
        process.exit();
      });
    });
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
